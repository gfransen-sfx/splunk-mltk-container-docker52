ARG BASE_IMAGE
FROM ${BASE_IMAGE}
ARG TAG
ARG REQUIREMENTS_PYTHON_BASE
ARG REQUIREMENTS_PYTHON_SPECIFIC

# setup environment
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV PATH=/dltk/.local/bin:/dltk/.local/lib/python3.9/site-packages/:$PATH

# package management and nodejs forced update to adress NPM CVE
RUN dnf update -y && \
    curl -fsSL https://rpm.nodesource.com/setup_20.x | bash - && \ 
    dnf install -y wget bzip2 git ca-certificates nodejs && \
    npm install -g npm@10.8.3 && \
    dnf clean all && \
    rm -rf /var/cache/dnf

RUN dnf install -y gcc openssl-devel bzip2-devel libffi-devel zlib-devel wget make sqlite-devel

# Build Python from source
WORKDIR /tmp
RUN wget https://www.python.org/ftp/python/3.9.13/Python-3.9.13.tgz \
    && tar xzf Python-3.9.13.tgz \
    && cd Python-3.9.13 \
    && ./configure --enable-optimizations \
    && make altinstall \
    && ln -sf /usr/local/bin/python3.9 /usr/bin/python3 \
    && ln -sf /usr/local/bin/pip3.9 /usr/bin/pip3 \
    && cd .. \
    && rm -rf Python-3.9.13 \
    && rm Python-3.9.13.tgz

# setup python+pip
RUN python3 -m ensurepip --upgrade

# update everything
RUN dnf update -y \
    && dnf upgrade -y \
    && dnf remove vim-minimal -y \
    && dnf clean all \
    && rm -rf /var/cache/yum \
    && rm -rf /games/

# configure file system
WORKDIR /srv
RUN mkdir /dltk

# Copy and run the HDF5 installation script, then set up the environment and verify installation
COPY install_hdf5.sh /tmp/install_hdf5.sh
RUN /bin/bash /tmp/install_hdf5.sh && \
    echo "source /etc/profile.d/hdf5.sh" >> ~/.bashrc && \
    if [ ! -f /usr/local/hdf5/lib/libhdf5.so ]; then \
        echo "Error: HDF5 library not found. Exiting." && exit 1; \
    fi

# Persist environment variables for subsequent Docker layers
ENV HDF5_DIR=/usr/local/hdf5
ENV LD_LIBRARY_PATH=/usr/local/hdf5/lib:$LD_LIBRARY_PATH
ENV PATH=/usr/local/hdf5/bin:$PATH

# Copy and run the HDF5 installation script
#COPY install_hdf5.sh /tmp/install_hdf5.sh
#RUN /bin/bash /tmp/install_hdf5.sh

# Source the HDF5 environment variables
#RUN source /etc/profile.d/hdf5.sh

# Verify HDF5 installation before proceeding
#RUN if [ ! -f /usr/local/hdf5/lib/libhdf5.so ]; then \
#        echo "Error: HDF5 library not found. Exiting." && exit 1; \
#    fi

# Ensure pip and setuptools are up to date
RUN pip3 install --no-cache-dir --upgrade pip setuptools==74.0.0 wheel

#Remove conflicting base image package
RUN dnf remove python3-requests -y

# install base python requirements
COPY ./requirements_files/${REQUIREMENTS_PYTHON_BASE} /dltk/${REQUIREMENTS_PYTHON_BASE}
RUN pip3 install --no-cache-dir --upgrade -r /dltk/${REQUIREMENTS_PYTHON_BASE}

# install specific python requirements
COPY ./requirements_files/${REQUIREMENTS_PYTHON_SPECIFIC} /dltk/${REQUIREMENTS_PYTHON_SPECIFIC}
RUN if [ -s "/dltk/${REQUIREMENTS_PYTHON_SPECIFIC}" ]; then \
    pip3 install --timeout=100 --no-cache-dir --upgrade -r /dltk/${REQUIREMENTS_PYTHON_SPECIFIC}; fi

# Remove packages build tools
#RUN dnf remove -y gcc wget make 

# Clean up pip cache and npm cache before installs
RUN pip3 install --no-cache-dir --upgrade pip && pip cache purge
RUN npm cache clean --force

#Force update of CVE affected packages

RUN rm -rf /usr/lib/python3.9/site-packages/urllib3*
RUN rm -rf /usr/local/lib/python3.9/site-packages/urllib3*

RUN rm -rf /usr/share/python3-wheels/setuptools-53.0.0-py3-none-any.whl
RUN rm -rf /usr/lib/python3.9/site-packages/setuptools-53.0.0.dist-info

RUN rm -rf /usr/lib/python3.9/site-packages/idna-2.10-py3.9.egg-info
RUN rm -rf /usr/local/lib/python3.9/site-packages/idna-2.*

#latest version supported by splunk-opentelemetry = 41.0.5 CVE = < 43.0.1
RUN pip3 install --no-cache-dir --force-reinstall urllib3==1.26.19
RUN pip3 install --no-cache-dir --force-reinstall cryptography==43.0.1
RUN pip3 install --no-cache-dir --force-reinstall idna>=3.7

# For npm packages (NodeJS)
RUN npm install --force ip@2.0.1 semver@7.5.2 tar@6.2.1

RUN pip check

# Create SUOD directory if it doesn't exist and change its permissions
RUN mkdir -p /usr/local/lib/python3.9/site-packages/suod/models/saved_models/ && \
    chmod -R 777 /usr/local/lib/python3.9/site-packages/suod/models/saved_models/


# configure spacy if it was installed
#RUN if pip3 freeze | grep -q spacy;\
#    then echo 'Spacy is installed, downloading language file...';\
#    python3 -m spacy download en_core_web_sm;\
#    else echo 'Spacy is not installed'; fi

# creating new self signed certs
RUN openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout dltk.key -out dltk.pem -subj="/CN=dsdl"
RUN mkdir /dltk/.jupyter/; mv dltk.key /dltk/.jupyter/dltk.key; mv dltk.pem /dltk/.jupyter/dltk.pem

# Copy bootstrap entry point script
COPY ./bootstrap_scripts/bootstrap_fast.sh /dltk/
COPY ./bootstrap_scripts/bootstrap_backup.sh /dltk/
COPY app /dltk/app
COPY notebooks /dltk/notebooks
COPY package_tests /dltk/package_tests

# Install dos2unix, then convert windows-like line endings to linux-like
# The bootstrap script won't run otherwise if the image was build on a windows machine
# Finally, remove dos2unix again
RUN dnf install -y dos2unix
RUN find /dltk/ -name 'bootstrap_*.sh' -type f -exec dos2unix {} \;
RUN dnf remove -y dos2unix && yum clean all \
    && dnf autoremove -y

# Install local DSDL supporting functions
RUN mkdir /dltk/packages
COPY package-dsdlsupport/dist/dsdlsupport-1.0.0.tar.gz /dltk/packages/dsdlsupport-1.0.0.tar.gz
RUN pip3 install /dltk/packages/dsdlsupport-1.0.0.tar.gz

# Copy jupyter config
COPY config/jupyter_notebook_config.py /dltk/.jupyter/jupyter_notebook_config.py

# Since JupyterLab 3 jupyter server config needs to be set
COPY config/jupyter_server_config.py /dltk/.jupyter/jupyter_server_config.py

# Copy jupyter notebook conversion template to export python module
COPY config/jupyter_notebook_template.tpl /dltk/.jupyter/jupyter_notebook_conversion.tpl
COPY config/null.tpl /dltk/.jupyter/null.tpl

# Handle user rights
RUN chgrp -R 0 /dltk && \
    chmod -R g=u /dltk
RUN chgrp -R 0 /srv && \
    chmod -R g=u /srv
RUN chmod g+w /etc/passwd
USER 1001

# Expose container port 5000 (MLTK Container Service) and 8888 (Notebook)
EXPOSE 5000 8888
# Define bootstrap as entry point to start container
ENTRYPOINT ["/dltk/bootstrap_fast.sh"]


