ARG BASE_IMAGE=redhat/ubi9
FROM ${BASE_IMAGE}
ARG TAG
ARG REQUIREMENTS_PYTHON_BASE
ARG REQUIREMENTS_PYTHON_SPECIFIC
ARG TARGETPLATFORM

# setup environment
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV PATH=/dltk/.local/bin:/dltk/.local/lib/python3.9/site-packages/:$PATH

# force update of NPM to resolve CVEs & install package build/management 
RUN dnf update -y && \
    curl -fsSL https://rpm.nodesource.com/setup_20.x | bash - && \ 
    dnf install -y wget bzip2 git ca-certificates nodejs && \
    npm install -g npm@10.8.3 && \
    dnf clean all && \
    rm -rf /var/cache/dnf

# package management
RUN yum install wget bzip2 git ca-certificates gcc -y
#RUN yum install nodejs -y
RUN yum install python39 -y

RUN find / -name "pip"

RUN rm -rf /usr/local/lib/python3.9/site-packages/pip
RUN rm -rf /usr/lib/python3.9/site-packages/pip
RUN rm -rf /root/.cache/pip

# setup python+pip+upgrade
RUN python3 -m ensurepip 
RUN find / -name "pip"
RUN rm -rf /root/.cache/pip
RUN find / -name "pip"
RUN /usr/bin/python3 -m pip install --upgrade pip


# install build requirements for arm64
RUN if [ "$TARGETPLATFORM" = "linux/arm64" ]; then \
        pip3 install wheel && \
        yum install python3-devel -y --exclude=python3-pip && \
        yum remove python3-requests -y; \
    else \
        echo 'Not ARM64 platform'; \
    fi

# update everything
RUN yum update -y
RUN yum upgrade -y
RUN yum remove vim-minimal -y
RUN yum autoremove -y
RUN pip3 install --no-cache-dir --upgrade pip

# Remove legacy Urllib3 version from base image
RUN rm -rf /usr/lib/python3.9/site-packages/urllib3*

# configure file system
WORKDIR /srv
RUN mkdir /dltk

# install base python requirements
COPY ./requirements_files/${REQUIREMENTS_PYTHON_BASE} /dltk/${REQUIREMENTS_PYTHON_BASE}
COPY ./requirements_files/constraints.txt /dltk/constraints.txt
RUN pip3 install --no-cache-dir --upgrade -r /dltk/${REQUIREMENTS_PYTHON_BASE} --constraint /dltk/constraints.txt;

# install specific python requirements
COPY ./requirements_files/${REQUIREMENTS_PYTHON_SPECIFIC} /dltk/${REQUIREMENTS_PYTHON_SPECIFIC}
COPY ./requirements_files/constraints.txt /dltk/constraints.txt
RUN if [ -s "/dltk/${REQUIREMENTS_PYTHON_SPECIFIC}" ]; then \
    pip3 install --prefer-binary --timeout=100 --no-cache-dir --upgrade -r /dltk/${REQUIREMENTS_PYTHON_SPECIFIC} --constraint /dltk/constraints.txt; fi

# configure spacy if it was installed
RUN if pip3 freeze | grep -q spacy;\
    then echo 'Spacy is installed, downloading language file...';\
    python3 -m spacy download en_core_web_sm;\
    else echo 'Spacy is not installed'; fi

# creating new self signed certs
RUN openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout dltk.key -out dltk.pem -subj="/CN=dsdl"
RUN mkdir /dltk/.jupyter/; mv dltk.key /dltk/.jupyter/dltk.key; mv dltk.pem /dltk/.jupyter/dltk.pem

# Copy bootstrap entry point script
COPY ./bootstrap_scripts/bootstrap_fast.sh /dltk/
COPY ./bootstrap_scripts/bootstrap_backup.sh /dltk/
COPY app /dltk/app
COPY notebooks /dltk/notebooks
COPY package_tests /dltk/package_tests
COPY school_of_dsdl /dltk/school_of_dsdl

# Install dos2unix, then convert windows-like line endings to linux-like
# The bootstrap script won't run otherwise if the image was build on a windows machine
# Finally, remove dos2unix again
RUN yum install -y dos2unix
RUN find /dltk/ -name 'bootstrap_*.sh' -type f -exec dos2unix {} \;
RUN yum remove -y dos2unix && yum clean all

# Install local DSDL supporting functions
RUN mkdir /dltk/packages
COPY package-dsdlsupport/dist/dsdlsupport-1.0.0.tar.gz /dltk/packages/dsdlsupport-1.0.0.tar.gz
RUN pip3 install /dltk/packages/dsdlsupport-1.0.0.tar.gz


# Fix pip version
RUN pip3 install --no-cache-dir --upgrade pip && pip cache purge
RUN python3 -m pip install --upgrade --force-reinstall pip>=23.3 --upgrade-strategy eager

# Copy jupyter config
COPY config/jupyter_notebook_config.py /dltk/.jupyter/jupyter_notebook_config.py

# Since JupyterLab 3 jupyter server config needs to be set
COPY config/jupyter_server_config.py /dltk/.jupyter/jupyter_server_config.py

# Copy jupyter notebook conversion template to export python module
COPY config/jupyter_notebook_template.tpl /dltk/.jupyter/jupyter_notebook_conversion.tpl
COPY config/null.tpl /dltk/.jupyter/null.tpl

# Handle user rights
RUN chgrp -R 0 /dltk && \
    chmod -R g=u /dltk
RUN chgrp -R 0 /srv && \
    chmod -R g=u /srv
RUN chmod g+w /etc/passwd
USER 1001

# Set Trash folder location
RUN export XDG_DATA_HOME=/srv/.Trash-1001

# Expose container port 5000 (MLTK Container Service) and 8888 (Notebook)
EXPOSE 5000 8888
# Define bootstrap as entry point to start container
ENTRYPOINT ["/dltk/bootstrap_fast.sh"]
